// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Muse.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Muse.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241211124035_user_phone_required")]
    partial class user_phone_required
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Muse.DAL.Models.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.Property<long>("ServiceSpecificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_specification_id");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_booking");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_booking_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_booking_is_deleted");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_booking_service_id");

                    b.HasIndex("ServiceSpecificationId")
                        .HasDatabaseName("ix_booking_service_specification_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_booking_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_booking_user_id");

                    b.ToTable("booking", (string)null);
                });

            modelBuilder.Entity("Muse.DAL.Models.BookingStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.HasKey("Id")
                        .HasName("pk_booking_status");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_booking_status_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_booking_status_is_deleted");

                    b.ToTable("booking_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.BookingStatusTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_booking_status_translation");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_booking_status_translation_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_booking_status_translation_is_deleted");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_booking_status_translation_status_id");

                    b.ToTable("booking_status_translation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Confirmed",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Подтверждено",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 3L,
                            Name = "Հաստատված",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Completed",
                            StatusId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Завершено",
                            StatusId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 3L,
                            Name = "Կատարված",
                            StatusId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Cancelled",
                            StatusId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Отменено",
                            StatusId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 3L,
                            Name = "Չեղարկված",
                            StatusId = 3L
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.Error", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.HasKey("Id")
                        .HasName("pk_errors");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_errors_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_errors_is_deleted");

                    b.ToTable("errors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.ErrorTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<long>("ErrorId")
                        .HasColumnType("bigint")
                        .HasColumnName("error_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_error_translations");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_error_translations_created_date");

                    b.HasIndex("ErrorId")
                        .HasDatabaseName("ix_error_translations_error_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_error_translations_is_deleted");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_error_translations_language_id");

                    b.ToTable("error_translations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 1L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Duplicate item"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 1L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Дублированное значение"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 1L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Կրկնվող արժեք"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 2L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Cannot remove data with reference"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 2L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Нельзя удалить значение со ссылкой"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 2L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "չի կարելի ջնջել արժեքը հղումով"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 3L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "The given value is used"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 3L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Данное значение используется"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 3L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Տվյալ արժեքը օգտագործվում է"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 4L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "The specified email address is already used!"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 4L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Указанный электронный адрес уже занят!"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 4L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Նշված էլ. հասցեն արդեն զբաղված է:"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 5L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Email is not verified!"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 5L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Адрес эл. почты не подтвержден!"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 5L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Էլ. հասցեն հաստատված չէ:"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 6L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Your current password is incorrect."
                        },
                        new
                        {
                            Id = 17L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 6L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Ваш текущий пароль неправильный."
                        },
                        new
                        {
                            Id = 18L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 6L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Ձեր ընթացիկ գաղտնաբառը սխալ է."
                        },
                        new
                        {
                            Id = 19L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 7L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Oops! Link has expired.\nWe'll send a fresh verification email to your inbox, and you can click the link in that one to confirm your account."
                        },
                        new
                        {
                            Id = 20L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 7L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Упс! Срок действия ссылки истек.\nМы отправим новое письмо с подтверждением на ваш почтовый ящик, и вы сможете щелкнуть ссылку в нем, чтобы подтвердить свою учетную запись."
                        },
                        new
                        {
                            Id = 21L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 7L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Հղումը ժամկետանց է:\nՄենք նոր հաստատող նամակ կուղարկենք Ձեր նշած էլեկտրոնային փոստի հասցեյինց, որի միջոցով կկարողանաք հաստատել Ձեր հաշիվը:"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 8L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Oops! Link expired.\nPlease click the \"Forgot password\" button and we will send a new email to the email address you provided, through which you will be able to change your password."
                        },
                        new
                        {
                            Id = 23L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 8L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Упс! Срок действия ссылки истек.\n Нажмите кнопку «Забыли пароль», и мы отправим на указанный вами адрес электронной почты новое письмо, с помощью которого вы сможете изменить свой пароль."
                        },
                        new
                        {
                            Id = 24L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 8L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Հղումը ժամկետանց է:\nԽնդրում ենք սեղմել «Մոռացել եք գաղտնաբառը» կոճակը և մենք նոր նամակ կուղարկենք Ձեր նշած էլեկտրոնային փոստի հասցեյինց, որի միջոցով կկարողանաք փոխել Ձեր գաղտնաբառը:"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 9L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "The old password cannot be reused."
                        },
                        new
                        {
                            Id = 26L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 9L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Старый пароль нельзя заново использовать."
                        },
                        new
                        {
                            Id = 27L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 9L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Հին գաղտնաբառը չի կարելի կրկին օգտագործել:"
                        },
                        new
                        {
                            Id = 28L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 10L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Oops! Something went wrong"
                        },
                        new
                        {
                            Id = 29L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 10L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Упс! Что-то пошло не так"
                        },
                        new
                        {
                            Id = 30L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 10L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Ինչ որ բան այնպես չգնաց"
                        },
                        new
                        {
                            Id = 31L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 11L,
                            IsDeleted = false,
                            LanguageId = 1L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Access Denied"
                        },
                        new
                        {
                            Id = 32L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 11L,
                            IsDeleted = false,
                            LanguageId = 2L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Доступ запрещен"
                        },
                        new
                        {
                            Id = 33L,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ErrorId = 11L,
                            IsDeleted = false,
                            LanguageId = 3L,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Հասանելիության սահմանափակում"
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhotoName")
                        .HasColumnType("text")
                        .HasColumnName("photo_name");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_languages_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_languages_is_deleted");

                    b.ToTable("languages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "en",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDefault = true,
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "English"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "ru",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Русский"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "am",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Հայերեն"
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.MailQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("FailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("failed_count");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_mail_queues");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_mail_queues_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_mail_queues_is_deleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_mail_queues_user_id");

                    b.ToTable("mail_queues", (string)null);
                });

            modelBuilder.Entity("Muse.DAL.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_permissions_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_permissions_is_deleted");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Muse.DAL.Models.PermissionTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.HasKey("Id")
                        .HasName("pk_permission_translations");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_permission_translations_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_permission_translations_is_deleted");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_permission_translations_permission_id");

                    b.ToTable("permission_translations", (string)null);
                });

            modelBuilder.Entity("Muse.DAL.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_roles_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_roles_is_deleted");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_role_permissions_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_role_permissions_is_deleted");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permissions_role_id");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("Muse.DAL.Models.RoleTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_translation");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_role_translation_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_role_translation_is_deleted");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_translation_role_id");

                    b.ToTable("role_translation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Admin",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Админ",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 3L,
                            Name = "Ադմին",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Client",
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Клиент",
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 3L,
                            Name = "Հաճախորդ",
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Salon",
                            RoleId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Салон",
                            RoleId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LanguageId = 3L,
                            Name = "Սալոն",
                            RoleId = 3L
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.HasKey("Id")
                        .HasName("pk_service");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_service_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_service_is_deleted");

                    b.ToTable("service", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.ServiceSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.HasKey("Id")
                        .HasName("pk_service_specification");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_service_specification_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_service_specification_is_deleted");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_service_specification_service_id");

                    b.ToTable("service_specification", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 0, 40, 0, 0),
                            IsDeleted = false,
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            IsDeleted = false,
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            IsDeleted = false,
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            IsDeleted = false,
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            IsDeleted = false,
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            IsDeleted = false,
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 2, 30, 0, 0),
                            IsDeleted = false,
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 2, 30, 0, 0),
                            IsDeleted = false,
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            IsDeleted = false,
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 15L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            IsDeleted = false,
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 16L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 17L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 19L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 20L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 21L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 22L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            IsDeleted = false,
                            ServiceId = 4L
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.ServiceSpecificationTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.Property<long?>("ServiceSpecificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_specification_id");

                    b.HasKey("Id")
                        .HasName("pk_service_specification_translation");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_service_specification_translation_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_service_specification_translation_is_deleted");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_service_specification_translation_service_id");

                    b.HasIndex("ServiceSpecificationId")
                        .HasDatabaseName("ix_service_specification_translation_service_specification_id");

                    b.ToTable("service_specification_translation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(without eye makeup) 40 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Everyday Makeup Duration",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(без макияжа глаз) 40 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Каждодневный макияж длительность",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(without lashes) 1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Evening Makeup Duration",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(без ресниц) 1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Вечерний макияж длительность",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(with lashes) 1 hour 30 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Evening Makeup Duration",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(с ресницами) 1 час 30 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Вечерний макияж длительность",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(without false lashes) 1 hour 30 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Bridal Makeup Duration",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(без ресниц) 1 час 30 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Макияж невесты длительность",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(with false lashes) 1 hour 30 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Bridal Makeup Duration",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(с ресницами) 1 час 30 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Макияж невесты длительность",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(without nail polish) 30 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Manicure Duration",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(без покрытия) 30 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Маникюр длительность",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(with nail polish) 1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Manicure Duration",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(с покрытием) 1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Маникюр длительность",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 15L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 hour 30 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Gel Manicure Duration",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 16L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 час 30 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Гель маникюр длительность",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 17L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Japanese Manicure Duration",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 18L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Японский маникюр длительность",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 19L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "2 hours",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Simple Design Duration",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 20L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "2 часа",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Простой дизайн длительность",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 21L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "2 hours 30 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Art Design Duration",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 22L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "2 часа 30 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Арт дизайн длительность",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 23L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(with gel coating) 2 hours 30 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Extensions Duration",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 24L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(с гель покрытием) 2 часа 30 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Наращивание длительность",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 25L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(without nail polish) 1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Pedicure Toes Duration",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 26L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(без покрытия) 1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Педикюр пальцы длительность",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 27L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(without nail polish) 1 hour 30 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Pedicure Toes + Feet Duration",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 28L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(без покрытия) 1 час 30 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Педикюр пальцы + ступни длительность",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 29L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(with nail polish) 1 hour 30 minutes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Pedicure Toes Duration",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 30L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(с покрытием) 1 час 30 минут",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Педикюр пальцы длительность",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 31L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(with nail polish) 2 hours",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Pedicure Toes + Feet Duration",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 32L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(с покрытием) 2 часа",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Педикюр пальцы + ступни длительность",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 33L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Brows Correction Duration",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 34L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Коррекция бровей длительность",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 35L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Brows Colouring Duration",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 36L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Окрашивание бровей длительность",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 37L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Brows Bleaching Duration",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 38L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Обесцвечивание бровей длительность",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 39L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Brows Lamination Duration",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 40L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Ламинация бровей длительность",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 41L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Lashes Lamination Duration",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 42L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Ламинация ресниц длительность",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 43L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 hour",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Brows + Lashes Lamination Duration",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 44L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 час",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Ламинация бровей + ресниц длительность",
                            ServiceId = 4L
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.ServiceTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_id");

                    b.HasKey("Id")
                        .HasName("pk_service_translation");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_service_translation_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_service_translation_is_deleted");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_service_translation_service_id");

                    b.ToTable("service_translation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Makeup",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Makeup",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Макияж",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Макияж",
                            ServiceId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Manicure",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Manicure",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Маникюр",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Маникюр",
                            ServiceId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pedicure",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Pedicure",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Педикюр",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Педикюр",
                            ServiceId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Brows/Lashes",
                            IsDeleted = false,
                            LanguageId = 1L,
                            Name = "Brows/Lashes",
                            ServiceId = 4L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Брови/ресницы",
                            IsDeleted = false,
                            LanguageId = 2L,
                            Name = "Брови/ресницы",
                            ServiceId = 4L
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.StaticText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.HasKey("Id")
                        .HasName("pk_static_text");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_static_text_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_static_text_is_deleted");

                    b.ToTable("static_text", (string)null);
                });

            modelBuilder.Entity("Muse.DAL.Models.StaticTextTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("StaticTextId")
                        .HasColumnType("bigint")
                        .HasColumnName("static_text_id");

                    b.HasKey("Id")
                        .HasName("pk_static_text_translation");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_static_text_translation_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_static_text_translation_is_deleted");

                    b.HasIndex("StaticTextId")
                        .HasDatabaseName("ix_static_text_translation_static_text_id");

                    b.ToTable("static_text_translation", (string)null);
                });

            modelBuilder.Entity("Muse.DAL.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("BasePasswordIsChanged")
                        .HasColumnType("boolean")
                        .HasColumnName("base_password_is_changed");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<long>("DefaultLanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("default_language_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailIsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_is_verified");

                    b.Property<DateTime?>("EmailVerificationRequestDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_verification_request_date");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("text")
                        .HasColumnName("email_verification_token");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("ResetPasswordRequestDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reset_password_request_date");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("text")
                        .HasColumnName("reset_password_token");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_users_created_date");

                    b.HasIndex("DefaultLanguageId")
                        .HasDatabaseName("ix_users_default_language_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_users_is_deleted");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BasePasswordIsChanged = false,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultLanguageId = 1L,
                            Email = "admin@gmail.com",
                            EmailIsVerified = false,
                            IsDeleted = false,
                            ModifyDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Admin",
                            PasswordHash = "AQAAAAEAACcQAAAAED6+5BoYHtAaOo7S+WlTRk5WxUHXKwgearLUEo1nHhe5MXozVtqD/M0/KcdENNJzZQ==",
                            Phone = "",
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Muse.DAL.Models.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_expired");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_sessions");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_user_sessions_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_user_sessions_is_deleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_sessions_user_id");

                    b.ToTable("user_sessions", (string)null);
                });

            modelBuilder.Entity("Muse.DAL.Models.Booking", b =>
                {
                    b.HasOne("Muse.DAL.Models.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_booking_services_service_id");

                    b.HasOne("Muse.DAL.Models.ServiceSpecification", "ServiceSpecification")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceSpecificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_booking_service_specifications_service_specification_id");

                    b.HasOne("Muse.DAL.Models.BookingStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_booking_booking_status_status_id");

                    b.HasOne("Muse.DAL.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_booking_users_user_id");

                    b.Navigation("Service");

                    b.Navigation("ServiceSpecification");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Muse.DAL.Models.BookingStatusTranslation", b =>
                {
                    b.HasOne("Muse.DAL.Models.BookingStatus", "Status")
                        .WithMany("Translations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_booking_status_translation_booking_status_status_id");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Muse.DAL.Models.ErrorTranslation", b =>
                {
                    b.HasOne("Muse.DAL.Models.Error", "Error")
                        .WithMany("Translations")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_error_translations_errors_error_id");

                    b.HasOne("Muse.DAL.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_error_translations_languages_language_id");

                    b.Navigation("Error");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Muse.DAL.Models.MailQueue", b =>
                {
                    b.HasOne("Muse.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mail_queues_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Muse.DAL.Models.PermissionTranslation", b =>
                {
                    b.HasOne("Muse.DAL.Models.Permission", "Permission")
                        .WithMany("Translations")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_permission_translations_permissions_permission_id");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Muse.DAL.Models.RolePermission", b =>
                {
                    b.HasOne("Muse.DAL.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("Muse.DAL.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Muse.DAL.Models.RoleTranslation", b =>
                {
                    b.HasOne("Muse.DAL.Models.Role", "Role")
                        .WithMany("Translations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_role_translation_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Muse.DAL.Models.ServiceSpecification", b =>
                {
                    b.HasOne("Muse.DAL.Models.Service", "Service")
                        .WithMany("ServiceSpecifications")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_service_specification_service_service_id");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Muse.DAL.Models.ServiceSpecificationTranslation", b =>
                {
                    b.HasOne("Muse.DAL.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_service_specification_translation_service_service_id");

                    b.HasOne("Muse.DAL.Models.ServiceSpecification", null)
                        .WithMany("Translation")
                        .HasForeignKey("ServiceSpecificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_service_specification_translation_service_specification_ser");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Muse.DAL.Models.ServiceTranslation", b =>
                {
                    b.HasOne("Muse.DAL.Models.Service", "Service")
                        .WithMany("Translations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_service_translation_service_service_id");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Muse.DAL.Models.StaticTextTranslation", b =>
                {
                    b.HasOne("Muse.DAL.Models.StaticText", "StaticText")
                        .WithMany("Translations")
                        .HasForeignKey("StaticTextId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_static_text_translation_static_text_static_text_id");

                    b.Navigation("StaticText");
                });

            modelBuilder.Entity("Muse.DAL.Models.User", b =>
                {
                    b.HasOne("Muse.DAL.Models.Language", "DefaultLanguage")
                        .WithMany()
                        .HasForeignKey("DefaultLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_languages_default_language_id");

                    b.HasOne("Muse.DAL.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_id");

                    b.Navigation("DefaultLanguage");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Muse.DAL.Models.UserSession", b =>
                {
                    b.HasOne("Muse.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Muse.DAL.Models.BookingStatus", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Muse.DAL.Models.Error", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Muse.DAL.Models.Permission", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Muse.DAL.Models.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Muse.DAL.Models.Service", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ServiceSpecifications");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Muse.DAL.Models.ServiceSpecification", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Translation");
                });

            modelBuilder.Entity("Muse.DAL.Models.StaticText", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Muse.DAL.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
